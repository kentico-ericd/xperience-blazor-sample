@attribute [Route(Routes.Address)]
@using BlazorApp.Components.Ecommerce.AddressForm
@using BlazorApp.Components.Ecommerce.CheckoutStepControl
@using BlazorApp.Components.Layout.ContentLayout
@using BlazorApp.Services
@using CMS.Ecommerce
@using CMS.Helpers
@inject IShoppingService shoppingService
@inject ICartService cartService

<ContentLayout>
    <div class="col-8">
        <h1>Billing</h1>
        <AddressForm @bind-Hide=billingSet Model=billingAddress />
        <h1 class="mt-5">Shipping</h1>
        <div class="form-group">
            <input @onchange="CopyAddressChanged" id="copy-from-billing" class="form-check-input" type="checkbox" />
            <label for="copy-from-billing" class="form-check-label">
                Copy from Billing address
            </label>
        </div>
        <AddressForm HideEditButton=copyBilling @bind-Hide=shippingSet Model=shippingAddress />
    </div>
    <CheckoutStepControl OnStepForward="OnStepForward" NextButtonDisabled="@(!shippingSet || !billingSet)" />
</ContentLayout>

@code {
    private ShoppingCartInfo cart;
    private AddressInfo billingAddress = new AddressInfo();
    private AddressInfo shippingAddress = new AddressInfo();
    private bool billingSet = false, shippingSet = false, copyBilling = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        cart = shoppingService.GetCurrentShoppingCart();

        // Load addresses from cart if set
        if(cart.ShoppingCartShippingAddress != null)
        {
            shippingAddress = cart.ShoppingCartShippingAddress;
        }
        if(cart.ShoppingCartBillingAddress != null)
        {
            billingAddress = cart.ShoppingCartBillingAddress;
        }
    }

    private void CopyAddressChanged(ChangeEventArgs e)
    {
        var isChecked = ValidationHelper.GetBoolean(e.Value, true);
        shippingSet = isChecked;
        copyBilling = isChecked;
        StateHasChanged();
    }

    private void OnStepForward(object sender, EventArgs e)
    {
        if (!shippingSet || !billingSet)
        {
            throw new Exception("Either the billing or shipping address was not set successfully.");
        }
        else
        {
            shoppingService.SetBillingAddress(billingAddress);
            var shipping = copyBilling ? billingAddress : shippingAddress;
            shoppingService.SetShippingAddress(shipping);
        }
    }
}