@attribute [Route(Routes.Shipping)]
@using BlazorApp.Components.Ecommerce.CheckoutStepControl
@using BlazorApp.Components.Layout.ContentLayout
@using BlazorApp.Services
@using CMS.Ecommerce
@using CMS.Helpers
@inject ICartService cartService
@inject IShoppingService shoppingService

<ContentLayout>
    <h1 class="mb-5">Shipping</h1>
    <div class="row">
        <div class="col-6">
            <div class="form-group">
                <label for="ShippingOption" class="form-check-label">
                    Shipping option
                </label>
                <select @onchange="ShippingChanged" id="ShippingOption" class="form-control col-6">
                    <option value="0">(select one)</option>
                    @foreach (var ship in cartService.GetShippingOptions())
                    {
                        <option value="@ship.ShippingOptionID">@ship.ShippingOptionDisplayName</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-6 pt-2">
            <h3>Details</h3>
            <div><b>Tax</b>: +@cartService.FormatPrice(cart.TotalTax, cart.Currency)</div>
            <div><b>Shipping</b> (@($"{cart.TotalItemsWeight}lbs")): +@cartService.FormatPrice(cart.TotalShipping, cart.Currency)</div>
            <div class="cart-total-container mt-2 pt-2 text-left">
                <span class="mr-2">Total:</span>
                <span class="h2">@cartService.FormatPrice(cart.GrandTotal, cart.Currency)</span>
            </div>
        </div>
    </div>
    <CheckoutStepControl />
</ContentLayout>

@code {
    private ShoppingCartInfo cart;

    private void ShippingChanged(ChangeEventArgs e)
    {
        var optionID = ValidationHelper.GetInteger(e.Value, 0);
        if (optionID > 0)
        {
            shoppingService.SetShippingOption(optionID);
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        cart = shoppingService.GetCurrentShoppingCart();
    }
}