@attribute [Route(Routes.Product)]
@using BlazorApp.Components.Ecommerce.ProductOptionsSelector
@using BlazorApp.Components.Layout.ContentLayout
@using BlazorApp.Services
@using CMS.DocumentEngine.Types.Blazor
@using CMS.Ecommerce
@using Kentico.Content.Web.Mvc
@using Models
@using Newtonsoft.Json
@inject IPageRetriever pageRetriever
@inject IProductService productService
@inject ICartService cartService
@inject NavigationManager NavigationManager
@inject IShoppingService shoppingService

<ContentLayout>
    <h3 class="mb-4">@Model.Product.DocumentName</h3>
    <div class="row">
        <div class="product-detail-image col-5">
            <img src="@Model.Image" alt="@Model.Product.DocumentSKUName">
        </div>
        <div class="col-2"></div>
        <div class="col">
            <div class="product-detail-sidebar text-right p-3">
                <div class="product-detail-options">
                    <ProductOptionsSelector @ref="selector" ProductViewModel=Model />
                </div>
                <button disabled="@AddButtonDisabled()" @onclick="AddToCart" class="btn btn-danger mt-3">
                    <i class="bi bi-cart-fill"></i> Add to cart
                </button>
            </div>
        </div>
    </div>
    <div class="row mt-5">
        @((MarkupString)Model.Product.SKU.SKUDescription)
    </div>
</ContentLayout>

@code {
    [Parameter]
    public string Alias { get; set; }

    private ProductViewModel mProduct;

    private ProductOptionsSelector selector;

    public ProductViewModel Model
    {
        get
        {
            if (mProduct == null)
            {
                var page = pageRetriever.Retrieve<Product>(query => query
                .WhereEquals("NodeAlias", Alias))
                .FirstOrDefault();
                mProduct = productService.GetViewModel(page);
            }
            return mProduct;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    private bool AddButtonDisabled()
    {
        if (selector == null)
        {
            // For some reason, on first render the selector is not initialized.
            // Check availability after render
            return true;
        }
        if (selector.SelectedVariant == null)
        {
            return !Model.Available;
        }
        else
        {
            return !selector.SelectedVariant.SKUSellOnlyAvailable || selector.SelectedVariant.SKUAvailableItems > 0;
        }
    }

    public void AddToCart()
    {
        int skuid = selector.SelectedVariant == null ? Model.Product.SKU.SKUID : selector.SelectedVariant.SKUID;
        var url = $"{Routes.AddItem}?sku={skuid}";

        if (selector.SelectedOptions.Count() > 0)
        {
            url += $"&opts={JsonConvert.SerializeObject(selector.SelectedOptions)}";
        }

        NavigationManager.NavigateTo(url, true);
    }
}