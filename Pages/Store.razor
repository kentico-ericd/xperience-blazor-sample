@attribute [Route(Routes.Store)]
@attribute [Route(Routes.StoreWithCategory)]
@using BlazorApp.Components.ContentLayout
@using BlazorApp.Components.SearchResultCard
@using BlazorApp.Services
@using Kentico.Content.Web.Mvc
@using Models
@inject IPageRetriever pageRetriever
@inject ISearchService searchService
@inject IProductService productService

<ContentLayout>
    <div class="container">
        <div class="row justify-content-between">
            <div class="col">
                <h3>@Header</h3>
            </div>
            <div class="col d-inline-flex my-2 my-lg-0">
                <input class="form-control mr-sm-2" type="text" @bind="searchText" />
                <button class="btn btn-outline-secondary my-2 my-sm-0" @onclick="DoSearch">Search</button>
            </div>
        </div>
        <section class="py-5 container-fluid row justify-content-center">
            @foreach (var item in Items)
            {
                <SearchResultCard ProductViewModel=item />
            }
        </section>
    </div>
    
</ContentLayout>

@code {
    [Parameter]
    public string Category { get; set; }
    public string Header { get; set; }
    public string searchText;

    public IEnumerable<ProductViewModel> Items { get; set; } = new List<ProductViewModel>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Header = string.IsNullOrEmpty(Category) ? "All products" : Category;
    }

    private void DoSearch() {
        var searchResultsModel = searchService.Search(searchText);
        Items = searchResultsModel.Items.Select(i => productService.GetViewModel(i));
        Header = $"Search results - {searchResultsModel.Query} ({searchResultsModel.Items.Count()})";
    }
}