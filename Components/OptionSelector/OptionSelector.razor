@using CMS.Ecommerce
@using CMS.Helpers
@using Models
@inject BlazorApp.Services.IProductService productService

<form>
    @if (ProductViewModel.Variants.Count() > 0)
    {
        <div class="form-group">
            <h4>Variants</h4>
            <select @onchange="VariantSelected" id="selected-variant" class="form-control">
                <option value="0">(none)</option>
                @foreach (SKUInfo variant in ProductViewModel.Variants)
                {
                    <option value="@variant.SKUID">@variant.SKUName (+@FormatPrice(variant.SKUPrice))</option>
                }
            </select>
        </div>
    }

    @if (ProductViewModel.AccessoryOptions.Count() > 0)
    {
        <div class="form-group">
            <div class="form-check">
                @foreach (OptionCategoryInfo optionCategory in
               productService.GetOptionCategoryInfos(ProductViewModel.AccessoryOptions))
                {
                    <h4>@optionCategory.CategoryLiveSiteDisplayName:</h4>
                    @foreach (OptionViewModel option in ProductViewModel.AccessoryOptions)
                    {
                        if (option.OptionCategoryName == optionCategory.CategoryName)
                        {
                            <input @onchange="eventArgs => OptionSelected(option, eventArgs.Value)" id="accessory-@option.SKUID"
                class="form-check-input" type="checkbox" value="@option.SKUID" />
                            <label for="accessory-@option.SKUID" class="form-check-label">@option.Name
                                (+@FormatPrice(option.Adjustment))</label>
                        }
                    }
                }
            </div>
        </div>
    }

    @if (ProductViewModel.NonVariantAttributeOptions.Count() > 0)
    {
        foreach (OptionCategoryInfo optionCategory in
        productService.GetOptionCategoryInfos(ProductViewModel.NonVariantAttributeOptions))
        {
            <div class="form-group">
                <h4>@optionCategory.CategoryLiveSiteDisplayName:</h4>
                <select @onchange="NonVarOptSelected" id="nonvar-opt-@optionCategory.CategoryName" class="form-control">
                    @foreach (OptionViewModel option in ProductViewModel.NonVariantAttributeOptions.Where(o =>
                   o.OptionCategoryName == optionCategory.CategoryName))
                    {
                        <option value="@option.SKUID">@option.Name (+@FormatPrice(option.Adjustment))</option>
                    }
                </select>
            </div>
        }
    }

    @if (ProductViewModel.TextOptions.Count() > 0)
    {
        foreach (OptionCategoryInfo optionCategory in productService.GetOptionCategoryInfos(ProductViewModel.TextOptions))
        {
            <h4>@optionCategory.CategoryLiveSiteDisplayName:</h4>
            foreach (OptionViewModel option in ProductViewModel.TextOptions)
            {
                if (option.OptionCategoryName == optionCategory.CategoryName)
                {
                    <div class="form-group">
                        <label for="text-@option.SKUID"></label>
                        <input @onchange="eventArgs => TextOptionChanged(option, eventArgs.Value)" type="text" class="form-control"
            id="text-@option.SKUID" name="text-@option.SKUID" placeholder="+@FormatPrice(option.Adjustment)" value="" />
                    </div>
                }
            }
        }
    }

</form>
<div class="product-detail-price">
    @FormatPrice(TotalPrice)
</div>

@code {
    [Parameter]
    public ProductViewModel ProductViewModel { get; set; }
    private SKUInfo SelectedVariant { get; set; }
    private List<OptionViewModel> SelectedOptions = new List<OptionViewModel>();

    public decimal TotalPrice
    {
        get
        {
            var price = ProductViewModel.Prices.Price;
            if (SelectedVariant != null)
            {
                price += SelectedVariant.SKUPrice;
            }

            foreach (OptionViewModel option in SelectedOptions)
            {
                price += option.Adjustment;
            }
            return price;
        }
    }

    private void NonVarOptSelected(ChangeEventArgs e)
    {
        var skuID = ValidationHelper.GetInteger(e.Value, 0);
        var sku = SKUInfo.Provider.Get(skuID);
        var option = new OptionViewModel {
            OptionCategoryName = sku.SKUOptionCategory.CategoryName,
            Name = sku.SKUName,
            Adjustment = sku.SKUPrice,
            SKUID = sku.SKUID,
            OptionCategoryID = sku.SKUOptionCategoryID
        };

        var existingSelectedOption = SelectedOptions.Where(o => o.OptionCategoryID == sku.SKUOptionCategoryID).FirstOrDefault();
        if(existingSelectedOption != null) {
            SelectedOptions.Remove(existingSelectedOption);            
        }

        SelectedOptions.Add(option);
        StateHasChanged();
    }

    private void TextOptionChanged(OptionViewModel option, object value)
    {
        string text = ValidationHelper.GetString(value, string.Empty);
        if (string.IsNullOrEmpty(text))
        {
            SelectedOptions.Remove(option);
        }
        else
        {
            if (!SelectedOptions.Contains(option))
                SelectedOptions.Add(option);
        }

        StateHasChanged();
    }

    private void OptionSelected(OptionViewModel option, object value)
    {
        bool isChecked = ValidationHelper.GetBoolean(value, false);
        if (isChecked)
        {
            SelectedOptions.Add(option);
        }
        else
        {
            SelectedOptions.Remove(option);
        }

        StateHasChanged();
    }

    protected void VariantSelected(ChangeEventArgs e)
    {
        var skuID = ValidationHelper.GetInteger(e.Value, 0);
        if (skuID > 0)
        {
            SelectedVariant = ProductViewModel.Variants.Where(v => v.SKUID == skuID).FirstOrDefault();
        }
        else
        {
            SelectedVariant = null;
        }

        StateHasChanged();
    }

    public string FormatPrice(decimal price)
    {
        return String.Format(ProductViewModel.Prices.Currency.CurrencyFormatString, price);
    }
}