@using BlazorApp.Services
@using CMS.DocumentEngine.Types.Blazor
@using CMS.Ecommerce
@using CMS.Helpers
@using Kentico.Content.Web.Mvc
@inject IPageUrlRetriever pageUrlRetriever
@inject ICalculationService calculationService

<div class="col-3 m-1 mb-5">
    <!-- bbb_deals -->
    <div class="bbb_deals">
        <div class="ribbon ribbon-top-right"><span><small class="cross">x </small>3</span></div>
        <div class="bbb_deals_title">Today's Combo Offer</div>
        <div class="bbb_deals_slider_container">
            <div class=" bbb_deals_item">
                <div class="bbb_deals_image"><img src="https://i.imgur.com/9UYzfny.png" alt=""></div>
                <div class="bbb_deals_content">
                    <div class="bbb_deals_info_line d-flex flex-row justify-content-start">
                        <div class="bbb_deals_item_category"><a href="#">Laptops</a></div>
                        <div class="bbb_deals_item_price_a ml-auto"><strike>₹30,000</strike></div>
                    </div>
                    <div class="bbb_deals_info_line d-flex flex-row justify-content-start">
                        <div class="bbb_deals_item_name">Toshiba B77</div>
                        <div class="bbb_deals_item_price ml-auto">₹27,550</div>
                    </div>
                    <div class="available">
                        <div class="available_line d-flex flex-row justify-content-start">
                            <div class="available_title">Available: <span>6</span></div>
                            <div class="sold_stars ml-auto"> <i class="fa fa-star"></i> <i class="fa fa-star"></i> <i
                                    class="fa fa-star"></i> <i class="fa fa-star"></i> </div>
                        </div>
                        <div class="available_bar"><span style="width:17%"></span></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Product Product { get; set; }

    public bool Available
    {
        get
        {
            return !Product.SKU.SKUSellOnlyAvailable || Product.SKU.SKUAvailableItems > 0;
        }
    }

    public string ProductImage
    {
        get
        {
            return string.IsNullOrEmpty(Product.SKU.SKUImagePath) ? null :
            URLHelper.ResolveUrl(new FileUrl(Product.SKU.SKUImagePath, true).WithSizeConstraint(SizeConstraint.Size(452,
            452)).RelativePath);
        }
    }

    public string StatusName
    {
        get
        {
            return Product.SKUProduct.PublicStatus == null ? "" :
            Product.SKUProduct.PublicStatus.PublicStatusDisplayName;
        }
    }

    private ProductCatalogPrices mPrices;
    public ProductCatalogPrices Prices
    {
        get
        {
            if (mPrices == null)
            {
                mPrices = calculationService.CalculatePrice(Product.SKU);
            }
            return mPrices;
        }
    }
}