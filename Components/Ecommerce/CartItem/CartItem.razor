@using BlazorApp.Services
@using CMS.Ecommerce
@using CMS.Helpers
@inject IProductService productService
@inject ICartService cartService
@inject IShoppingService shoppingService

<div class="cart-card col-12 m-1 mb-5 pl-1 pr-1">
    <div class="container pl-0 mb-4">
        <div class="row">
            <div class="col-2 cart-image">
                <img src="@productService.GetProductImage(Item.SKU)" alt="@Item.SKU.SKUName">
            </div>
            <div class="col">
                <h3 class="mb-0">@ItemName</h3>
                <span class="cart-description">
                    <ul>
                        @if(Item.SKU.IsProductVariant) {
                            <li>
                                @Item.SKU.SKUName
                            </li>
                        }
                        @foreach (ShoppingCartItemInfo option in Options.OrderBy(i => i.CartItemGUID))
                        {
                            <li>
                                @GetOptionDescription(option)
                            </li>
                        }
                    </ul>
                </span>
            </div>
            <div class="cart-price-col col-2">
                <div class="cart-card-price font-weight-bold">
                    @cartService.FormatPrice(Item.UnitTotalPriceIncludingOptions * Item.CartItemUnits, Item.ShoppingCart.Currency)
                </div>
                <div class="form-group mt-2">
                    <input type="number" class="form-control form-control-sm mb-2"
                        @onchange="eventArgs => UpdateQuantity(Item, eventArgs.Value)"
                        id="text-@Item.SKUID" name="text-@Item.SKUID"
                        value="@Item.CartItemUnits" min="1" />
                    <button @onclick="eventArgs => RemoveItem(Item)" class="btn btn-danger">
                        <i class="bi bi-x-square-fill"></i> Remove
                    </button>                  
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ShoppingCartItemInfo Item { get; set; }
    [Parameter]
    public IEnumerable<ShoppingCartItemInfo> Options { get; set; }
    [Parameter]
    public Func<string> RefreshRequested { get; set; }
    public string ItemName {
        get {
            if(Item.SKU.IsProductVariant) {
                return Item.SKU.Parent.GetStringValue("SKUName", Item.SKU.SKUName);
            }
            else {
                return Item.SKU.SKUName;
            }
        }
    }
    
    public void RemoveItem(ShoppingCartItemInfo item) {
        shoppingService.RemoveItemFromCart(item.CartItemID);
        RefreshRequested.Invoke();
    }

    public void UpdateQuantity(ShoppingCartItemInfo item, object value) {
        int newUnits = ValidationHelper.GetInteger(value, 0);
        shoppingService.UpdateItemQuantity(item.CartItemID, newUnits);
        StateHasChanged();
        RefreshRequested.Invoke();
    }

    public string GetOptionDescription(ShoppingCartItemInfo option) {
        if(option.SKU.SKUOptionCategory.CategorySelectionType == OptionCategorySelectionTypeEnum.TextBox) {
            return $"{option.SKU.SKUOptionCategory.CategoryLiveSiteDisplayName} - '{option.CartItemText}'";
        }
        else {
            return $"{option.SKU.SKUOptionCategory.CategoryLiveSiteDisplayName} - {option.SKU.SKUName}";
        }
    }
}