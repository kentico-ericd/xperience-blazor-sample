@using BlazorApp.Components.Ecommerce.Selectors
@using BlazorApp.Services
@using CMS.Ecommerce
@using CMS.Helpers
@using Models
@inject IProductService productService
@inject ICartService cartService

<form>
    @if (ProductViewModel.Variants.Count() > 0)
    {
        <VariantSelector OnVariantSelected=VariantSelected Variants=ProductViewModel.Variants
        Currency=ProductViewModel.Prices.Currency />
    }

    @if (ProductViewModel.AccessoryOptions.Count() > 0)
    {
        foreach (OptionCategoryInfo optionCategory in
        productService.GetOptionCategoryInfos(ProductViewModel.AccessoryOptions))
        {
            var isVertical = optionCategory.CategorySelectionType == OptionCategorySelectionTypeEnum.CheckBoxesVertical;
            switch (optionCategory.CategorySelectionType)
            {
                case OptionCategorySelectionTypeEnum.CheckBoxesHorizontal:
                case OptionCategorySelectionTypeEnum.CheckBoxesVertical:
                    {

                        <CheckboxSelector OnOptionSelected="((args)=> OptionSelected(args.Item1, args.Item2, args.Item3))"
        Category=optionCategory Options=ProductViewModel.AccessoryOptions Currency=ProductViewModel.Prices.Currency
        IsVertical=isVertical />

                        break;
                    }
                case OptionCategorySelectionTypeEnum.RadioButtonsHorizontal:
                case OptionCategorySelectionTypeEnum.RadioButtonsVertical:
                    {

                        <RadioButtonSelector OnOptionSelected="((args)=> OptionSelected(args.Item1, args.Item2, args.Item3))"
        Category=optionCategory Options=ProductViewModel.AccessoryOptions Currency=ProductViewModel.Prices.Currency
        IsVertical=isVertical />

                        break;
                    }
                case OptionCategorySelectionTypeEnum.Dropdownlist:
                    {

                        <DropdownSelector OnOptionSelected="((args)=> OptionSelected(args.Item1, args.Item2, args.Item3))"
        Category=optionCategory Options=ProductViewModel.AccessoryOptions Currency=ProductViewModel.Prices.Currency />

                        break;
                    }
            }
        }
    }

    @if (ProductViewModel.NonVariantAttributeOptions.Count() > 0)
    {
        foreach (OptionCategoryInfo optionCategory in
        productService.GetOptionCategoryInfos(ProductViewModel.NonVariantAttributeOptions))
        {
            var isVertical = optionCategory.CategorySelectionType == OptionCategorySelectionTypeEnum.CheckBoxesVertical;
            switch (optionCategory.CategorySelectionType)
            {
                case OptionCategorySelectionTypeEnum.CheckBoxesHorizontal:
                case OptionCategorySelectionTypeEnum.CheckBoxesVertical:
                    {

                        <CheckboxSelector OnOptionSelected="((args)=> OptionSelected(args.Item1, args.Item2, args.Item3))"
        Category=optionCategory Options=ProductViewModel.NonVariantAttributeOptions
        Currency=ProductViewModel.Prices.Currency IsVertical=isVertical />

                        break;
                    }
                case OptionCategorySelectionTypeEnum.RadioButtonsHorizontal:
                case OptionCategorySelectionTypeEnum.RadioButtonsVertical:
                    {

                        <RadioButtonSelector OnOptionSelected="((args)=> OptionSelected(args.Item1, args.Item2, args.Item3))"
        Category=optionCategory Options=ProductViewModel.NonVariantAttributeOptions
        Currency=ProductViewModel.Prices.Currency IsVertical=isVertical />

                        break;
                    }
                case OptionCategorySelectionTypeEnum.Dropdownlist:
                    {

                        <DropdownSelector OnOptionSelected="((args)=> OptionSelected(args.Item1, args.Item2, args.Item3))"
        Category=optionCategory Options=ProductViewModel.NonVariantAttributeOptions
        Currency=ProductViewModel.Prices.Currency />

                        break;
                    }
            }
        }
    }

    @if (ProductViewModel.TextOptions.Count() > 0)
    {
        foreach (OptionCategoryInfo optionCategory in productService.GetOptionCategoryInfos(ProductViewModel.TextOptions))
        {
            <TextSelector OnOptionSelected="((args)=> OptionSelected(args.Item1, args.Item2, args.Item3))"
        Category=optionCategory Options=ProductViewModel.TextOptions Currency=ProductViewModel.Prices.Currency />
        }
    }

</form>
<div class="product-detail-price">
    @cartService.FormatPrice(TotalPrice, ProductViewModel.Prices.Currency)
</div>

@code {
    [Parameter]
    public ProductViewModel ProductViewModel { get; set; }
    public SKUInfo SelectedVariant { get; set; }
    public List<OptionViewModel> SelectedOptions = new List<OptionViewModel>();

    public decimal TotalPrice
    {
        get
        {
            var price = ProductViewModel.Prices.Price;
            if (SelectedVariant != null)
            {
                price += SelectedVariant.SKUPrice;
            }

            foreach (OptionViewModel option in SelectedOptions)
            {
                price += option.Adjustment;
            }
            return price;
        }
    }

    protected void VariantSelected(ChangeEventArgs e)
    {
        var skuID = ValidationHelper.GetInteger(e.Value, 0);
        if (skuID > 0)
        {
            SelectedVariant = ProductViewModel.Variants.Where(v => v.SKUID == skuID).FirstOrDefault();
        }
        else
        {
            SelectedVariant = null;
        }

        StateHasChanged();
    }

    public void OptionSelected(OptionViewModel option, object value, OptionCategoryInfo category)
    {
        if (option != null)
        {
            option.Value = value;
        }
        switch (category.CategorySelectionType)
        {
            case OptionCategorySelectionTypeEnum.TextBox:
                string text = ValidationHelper.GetString(value, string.Empty);
                if (string.IsNullOrEmpty(text))
                {
                    SelectedOptions.Remove(option);
                }
                else
                {
                    var existingTextOption = SelectedOptions.Where(o => o.CategoryID ==
                    option.CategoryID).FirstOrDefault();
                    if (existingTextOption == null)
                    {
                        SelectedOptions.Add(option);
                    }
                    else
                    {
                        SelectedOptions.Remove(existingTextOption);
                        SelectedOptions.Add(option);
                    }
                }
                break;
            case OptionCategorySelectionTypeEnum.CheckBoxesHorizontal:
            case OptionCategorySelectionTypeEnum.CheckBoxesVertical:
                bool isChecked = ValidationHelper.GetBoolean(value, false);
                if (isChecked)
                {
                    SelectedOptions.Add(option);
                }
                else
                {
                    SelectedOptions.Remove(option);
                }
                break;
            case OptionCategorySelectionTypeEnum.Dropdownlist:
            case OptionCategorySelectionTypeEnum.RadioButtonsHorizontal:
            case OptionCategorySelectionTypeEnum.RadioButtonsVertical:
                SKUInfo sku;
                OptionViewModel newOption = null;
                var skuid = ValidationHelper.GetInteger(value, 0);
                if (skuid > 0)
                {
                    sku = SKUInfo.Provider.Get(skuid);
                    newOption = OptionViewModel.GetOptionViewModel(sku);
                }

                var existingSelectedOption = SelectedOptions.Where(o => o.CategoryID ==
                category.CategoryID).FirstOrDefault();

                if (existingSelectedOption != null)
                {
                    SelectedOptions.Remove(existingSelectedOption);
                }

                if (newOption != null) SelectedOptions.Add(newOption);
                break;
        }

        StateHasChanged();
    }
}